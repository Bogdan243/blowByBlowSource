{"version":3,"file":"static/js/160.73b35822.chunk.js","mappings":"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","sources":["ui-component/extended/Avatar.js","ui-component/cards/CardSecondaryAction.js","views/utilities/Color.js","views/utilities/PhraseCard.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ButtonBase, Link, Tooltip } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\n\r\n// ==============================|| CARD SECONDARY ACTION ||============================== //\r\n\r\nconst CardSecondaryAction = ({ title, link, icon }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Tooltip title={title || 'Reference'} placement=\"left\">\r\n            <ButtonBase disableRipple>\r\n                {!icon && (\r\n                    <Avatar component={Link} href={link} target=\"_blank\" alt=\"MUI Logo\" size=\"badge\" color=\"primary\" outline>\r\n                        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g clipPath=\"url(#clip0)\">\r\n                                <path\r\n                                    d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\"\r\n                                    fill={theme.palette.primary[800]}\r\n                                />\r\n                                <path\r\n                                    d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary[800]} />\r\n                                <path\r\n                                    d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                            </g>\r\n                            <defs>\r\n                                <clipPath id=\"clip0\">\r\n                                    <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\r\n                                </clipPath>\r\n                            </defs>\r\n                        </svg>\r\n                    </Avatar>\r\n                )}\r\n                {icon && (\r\n                    <Avatar component={Link} href={link} target=\"_blank\" size=\"badge\" color=\"primary\" outline>\r\n                        {icon}\r\n                    </Avatar>\r\n                )}\r\n            </ButtonBase>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nCardSecondaryAction.propTypes = {\r\n    icon: PropTypes.node,\r\n    link: PropTypes.string,\r\n    title: PropTypes.string\r\n};\r\n\r\nexport default CardSecondaryAction;\r\n","import PropTypes from 'prop-types';\r\nimport { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport Carousel from 'react-material-ui-carousel';\r\n// import { Navigation, Pagination, Scrollbar, A11y, EffectCards } from 'swiper/modules';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport { EffectCards, Navigation, Pagination, Virtual } from 'swiper/modules';\r\n\r\nimport 'swiper/css';\r\nimport 'swiper/css/navigation';\r\nimport 'swiper/css/pagination';\r\n// import 'swiper/css/effect-cards';\r\n\r\n// import 'pure-react-carousel/dist/react-carousel.es.css';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { Box, Grid, Card, CardActions, CardContent, IconButton, Button, MenuItem, TextField, Typography, Container } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\n\r\n// project imports\r\nimport PhraseCard from './PhraseCard';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { CircularProgress } from '@mui/material';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport readExcelFile from './ExcelReader';\r\n\r\nlet checkFavCard = (num) => {\r\n    let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n    // console.log('appProp', appProp);\r\n    if (appProp == null) {\r\n        localStorage.setItem('appProp', JSON.stringify({ favStorage: [], checkedList: [] }));\r\n        appProp = JSON.parse(localStorage.getItem('appProp'));\r\n    }\r\n\r\n    let output = 'disable';\r\n\r\n    if (appProp.favStorage.indexOf(num) != -1) {\r\n        output = 'error';\r\n    }\r\n    // console.log('appProp', appProp, num, output);\r\n    return output;\r\n};\r\n\r\nlet lastIndex = 0;\r\n\r\nlet cardAdapter = (num, slidingMode, state, updateState, swiper) => {\r\n    console.log(slidingMode, lastIndex, num);\r\n\r\n    if (slidingMode && num == 19 && lastIndex == 20) {\r\n        swiper.activeIndex = 1;\r\n        updateState({\r\n            from: state.from + 20,\r\n            to: state.to + 20,\r\n            currentNum: state.from + 20,\r\n            slideMode: true\r\n        });\r\n    }\r\n\r\n    lastIndex = num;\r\n    // if (slidingMode && state.from + num == state.to) {\r\n    //     // swiper.activeIndex = 5;\r\n    //     console.log(swiper.activeIndex);\r\n    //     updateState({\r\n    //         from: state.from + 20,\r\n    //         to: state.to + 20,\r\n    //         currentNum: state.from + 21,\r\n    //         slideMode: true\r\n    //     });\r\n    // } else if (slidingMode && state.from + num == state.from && state.from + num != 1) {\r\n    //     // swiper.activeIndex = 1;\r\n    //     updateState({\r\n    //         from: state.from - 20,\r\n    //         to: state.to - 20,\r\n    //         currentNum: state.from - 19,\r\n    //         slideMode: true\r\n    //     });\r\n    // }\r\n};\r\n\r\n// ===============================|| UI COLOR ||=============================== //\r\n\r\nconst UIColor = () => {\r\n    let location = useLocation();\r\n    let stateLocation = location.state;\r\n    let [state, updateState] = useState(stateLocation);\r\n    console.log('From color befor', state);\r\n\r\n    if (!state) {\r\n        state = {\r\n            from: 0,\r\n            to: 20,\r\n            currentNum: 0\r\n        };\r\n    }\r\n\r\n    // if(state.slideMode) {\r\n    //     state = {\r\n    //         from: 0,\r\n    //         to: 20,\r\n    //         currentNum: 0\r\n    //     };\r\n    // }\r\n\r\n    console.log('From color after', state);\r\n\r\n    let cardList = [];\r\n    let phraseList = [];\r\n\r\n    if ((state.from || state.from === 0) && state.to) {\r\n        phraseList = readExcelFile(state.from, state.to);\r\n    } else if (state.customList) {\r\n        phraseList = state.customList.map((item) => item.cardInfo);\r\n    }\r\n\r\n    for (let index = 0; index < phraseList.length; index++) {\r\n        cardList.push(\r\n            <SwiperSlide key={index}>\r\n                <Grid item key={index}>\r\n                    <Grid container justifyContent=\"center\">\r\n                        <Grid item sx={{ width: '250px' }}>\r\n                            <PhraseCard\r\n                                phrase={phraseList[index]['English phrase ']}\r\n                                example={phraseList[index].Example}\r\n                                translation={phraseList[index]['Russian translation']}\r\n                                meaning={phraseList[index]['Meaning of the phrase ']}\r\n                                currentNum={state.from !== null ? state.from + index + 1 : state.customList[index].num}\r\n                                isFavourite={\r\n                                    state.from !== null ? checkFavCard(state.from + index + 1) : checkFavCard(state.customList[index].num)\r\n                                }\r\n                                flipDirection=\"horizontal\"\r\n                            ></PhraseCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </SwiperSlide>\r\n        );\r\n\r\n        // console.log('cardListLen', cardList.length);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MainCard title=\"Collocation training\">\r\n                <Grid container sx={{ height: '530px' }} spacing={gridSpacing} justifyContent=\"center\" alignItems=\"center\">\r\n                    {/* <Carousel\r\n                        sx={{ width: '500px' }}\r\n                        animation=\"slide\"\r\n                        autoPlay={false}\r\n                        index={state.currentNum}\r\n                        next={(now, prev) => {\r\n                            cardAdapter(now, state.slideMode, state, updateState);\r\n                        }}\r\n                    >\r\n                        {cardList}\r\n                    </Carousel> */}\r\n                    <Swiper\r\n                        // effect={'cards'}\r\n                        // modules={[EffectCards, Navigation, Pagination]}\r\n                        modules={[Navigation, Pagination]}\r\n                        // spaceBetween={50}\r\n                        // onSwiper={setSwiperRef}\r\n                        // slidesPerView={1}\r\n                        navigation\r\n                        pagination={{ clickable: true }}\r\n                        // loop={true}\r\n                        // virtual\r\n                        // onSwiper={(swiper) => console.log(swiper)}\r\n                        // activeIndex={state.currentNum}\r\n                        // onSlideChange={(swiper) => {\r\n                        //     cardAdapter(swiper.activeIndex + 1, state.slideMode, state, updateState, swiper);\r\n                        // }}\r\n                    >\r\n                        {cardList}\r\n                    </Swiper>\r\n                    {/* {cardList[state.currentNum]} */}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UIColor;\r\n","import ReactCardFlip from 'react-card-flip';\r\nimport { useState, useEffect } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Card, CardActions, CardContent, IconButton, Button, MenuItem, TextField, Typography, Container } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { red } from '@mui/material/colors';\r\n\r\nconst cardStyle = {\r\n    minWidth: 250,\r\n    minHeight: 350,\r\n    boxShadow: 3\r\n};\r\n\r\nconst bull = (\r\n    <Box component=\"span\" sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}>\r\n        •\r\n    </Box>\r\n);\r\n\r\nconst PhraseCard = (props) => {\r\n    const [isFlipped, flip] = useState(false);\r\n    const [isFavourite, makeCardFavourite] = useState(props.isFavourite);\r\n\r\n    let invertFavStat = (currentNum) => {\r\n        if (isFavourite == 'disable') {\r\n            makeCardFavourite('error');\r\n            addFavToStorage(currentNum);\r\n        } else {\r\n            makeCardFavourite('disable');\r\n            deleteFavToStorage(currentNum);\r\n            console.log('del', currentNum);\r\n        }\r\n    };\r\n\r\n    let addFavToStorage = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let favStorage = appProp.favStorage;\r\n\r\n        console.log('isFav');\r\n        if (appProp.favStorage.indexOf(num) == -1) {\r\n            favStorage.push(num);\r\n            appProp.favStorage = favStorage;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    let deleteFavToStorage = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let favStorage = appProp.favStorage;\r\n\r\n        if (appProp.favStorage.indexOf(num) != -1) {\r\n            favStorage.splice(appProp.favStorage.indexOf(num), 1);\r\n            appProp.favStorage = favStorage;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    let setCardChecked = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let checkedList = appProp.checkedList;\r\n        console.log('checkList', checkedList);\r\n        if (!checkedList) {\r\n            checkedList = [];\r\n        }\r\n        console.log('checkListAfter', checkedList);\r\n        console.log('cardChecked', num);\r\n\r\n        if (checkedList.indexOf(num) == -1) {\r\n            checkedList.push(num);\r\n            appProp.checkedList = checkedList;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ReactCardFlip isFlipped={isFlipped} flipDirection={props.flipDirection ? props.flipDirection : 'horizontal'}>\r\n                <Card sx={cardStyle}>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Box margin=\"10px\">\r\n                                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                                    #{props.currentNum}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <IconButton\r\n                                margin=\"10px\"\r\n                                size=\"small\"\r\n                                aria-label=\"add to favorites\"\r\n                                onClick={() => invertFavStat(props.currentNum)}\r\n                            >\r\n                                <FavoriteIcon color={isFavourite} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <CardContent\r\n                        onClick={() => {\r\n                            flip(true);\r\n                            setCardChecked(props.currentNum);\r\n                        }}\r\n                        sx={{ height: '300px' }}\r\n                    >\r\n                        <Typography variant=\"h3\" component=\"div\" textAlign=\"center\" sx={{ mt: 3 }}>\r\n                            {props.phrase}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ mb: 3, mt: 3 }} textAlign=\"center\">\r\n                            {props.example}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card sx={cardStyle}>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <IconButton\r\n                                margin=\"10px\"\r\n                                size=\"small\"\r\n                                aria-label=\"add to favorites\"\r\n                                onClick={() => invertFavStat(props.currentNum)}\r\n                            >\r\n                                <FavoriteIcon color={isFavourite} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Box margin=\"10px\">\r\n                                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                                    #{props.currentNum}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <CardContent onClick={() => flip(false)} sx={{ height: '300px' }}>\r\n                        <Typography variant=\"h3\" component=\"div\" textAlign=\"center\" sx={{ mt: 3 }}>\r\n                            {props.meaning}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ mb: 3, mt: 3 }} textAlign=\"center\">\r\n                            {props.translation}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </ReactCardFlip>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PhraseCard;\r\n"],"names":["_ref","color","outline","size","sx","others","_objectWithoutProperties","_excluded","theme","useTheme","colorSX","palette","background","paper","bgcolor","concat","outlineSX","border","borderColor","sizeSX","width","spacing","height","_jsx","MuiAvatar","_objectSpread","title","link","icon","Tooltip","placement","children","_jsxs","ButtonBase","disableRipple","Avatar","component","Link","href","target","alt","viewBox","fill","xmlns","clipPath","d","primary","main","id","transform","checkFavCard","num","appProp","JSON","parse","localStorage","getItem","setItem","stringify","favStorage","checkedList","output","indexOf","stateLocation","useLocation","state","_useState","useState","_useState2","_slicedToArray","console","log","from","to","currentNum","cardList","phraseList","readExcelFile","customList","map","item","cardInfo","index","length","push","SwiperSlide","Grid","container","justifyContent","PhraseCard","phrase","example","Example","translation","meaning","isFavourite","flipDirection","_Fragment","MainCard","gridSpacing","alignItems","Swiper","modules","Navigation","Pagination","navigation","pagination","clickable","cardStyle","minWidth","minHeight","boxShadow","Box","props","isFlipped","flip","_useState3","_useState4","makeCardFavourite","invertFavStat","addFavToStorage","deleteFavToStorage","splice","ReactCardFlip","Card","margin","Typography","fontSize","gutterBottom","IconButton","onClick","FavoriteIcon","CardContent","setCardChecked","variant","textAlign","mt","mb"],"sourceRoot":""}