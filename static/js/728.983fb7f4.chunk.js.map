{"version":3,"file":"static/js/728.983fb7f4.chunk.js","mappings":"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","sources":["assets/images/icons/earning.svg","views/dashboard/Default/EarningCard.js","views/dashboard/Default/TotalOrderLineChartCard.js","views/dashboard/Default/TotalIncomeDarkCard.js","views/dashboard/Default/TotalIncomeLightCard.js","views/dashboard/Default/TotalGrowthBarChart.js","views/dashboard/Default/index.js","views/utilities/PhraseCard.js"],"sourcesContent":["var _path, _path2, _path3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgEarning(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 9H9C7.89543 9 7 9.89543 7 11V17C7 18.1046 7.89543 19 9 19H19C20.1046 19 21 18.1046 21 17V11C21 9.89543 20.1046 9 19 9Z\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 16C15.1046 16 16 15.1046 16 14C16 12.8954 15.1046 12 14 12C12.8954 12 12 12.8954 12 14C12 15.1046 12.8954 16 14 16Z\",\n    fill: \"#90CAF9\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 9V7C17 6.46957 16.7893 5.96086 16.4142 5.58579C16.0391 5.21071 15.5304 5 15 5H5C4.46957 5 3.96086 5.21071 3.58579 5.58579C3.21071 5.96086 3 6.46957 3 7V13C3 13.5304 3.21071 14.0391 3.58579 14.4142C3.96086 14.7893 4.46957 15 5 15H7\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEarning);\nexport default __webpack_public_path__ + \"static/media/earning.00f461a5c235604f1375d5e59ee3e093.svg\";\nexport { ForwardRef as ReactComponent };","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonEarningCard from 'ui-component/cards/Skeleton/EarningCard';\r\n\r\n// assets\r\nimport EarningIcon from 'assets/images/icons/earning.svg';\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport GetAppTwoToneIcon from '@mui/icons-material/GetAppOutlined';\r\nimport FileCopyTwoToneIcon from '@mui/icons-material/FileCopyOutlined';\r\nimport PictureAsPdfTwoToneIcon from '@mui/icons-material/PictureAsPdfOutlined';\r\nimport ArchiveTwoToneIcon from '@mui/icons-material/ArchiveOutlined';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    color: '#fff',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: theme.palette.secondary[800],\r\n        borderRadius: '50%',\r\n        top: -85,\r\n        right: -95,\r\n        [theme.breakpoints.down('sm')]: {\r\n            top: -105,\r\n            right: -140\r\n        }\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: theme.palette.secondary[800],\r\n        borderRadius: '50%',\r\n        top: -125,\r\n        right: -15,\r\n        opacity: 0.5,\r\n        [theme.breakpoints.down('sm')]: {\r\n            top: -155,\r\n            right: -70\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| DASHBOARD DEFAULT - EARNING CARD ||=========================== //\r\n\r\nconst EarningCard = ({ isLoading }) => {\r\n    const theme = useTheme();\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonEarningCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <Grid item>\r\n                                <Grid container justifyContent=\"space-between\">\r\n                                    <Grid item>\r\n                                        <Avatar\r\n                                            variant=\"rounded\"\r\n                                            sx={{\r\n                                                ...theme.typography.commonAvatar,\r\n                                                ...theme.typography.largeAvatar,\r\n                                                backgroundColor: theme.palette.secondary[800],\r\n                                                mt: 1\r\n                                            }}\r\n                                        >\r\n                                            <img src={EarningIcon} alt=\"Notification\" />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Avatar\r\n                                            variant=\"rounded\"\r\n                                            sx={{\r\n                                                ...theme.typography.commonAvatar,\r\n                                                ...theme.typography.mediumAvatar,\r\n                                                backgroundColor: theme.palette.secondary.dark,\r\n                                                color: theme.palette.secondary[200],\r\n                                                zIndex: 1\r\n                                            }}\r\n                                            aria-controls=\"menu-earning-card\"\r\n                                            aria-haspopup=\"true\"\r\n                                            onClick={handleClick}\r\n                                        >\r\n                                            <MoreHorizIcon fontSize=\"inherit\" />\r\n                                        </Avatar>\r\n                                        <Menu\r\n                                            id=\"menu-earning-card\"\r\n                                            anchorEl={anchorEl}\r\n                                            keepMounted\r\n                                            open={Boolean(anchorEl)}\r\n                                            onClose={handleClose}\r\n                                            variant=\"selectedMenu\"\r\n                                            anchorOrigin={{\r\n                                                vertical: 'bottom',\r\n                                                horizontal: 'right'\r\n                                            }}\r\n                                            transformOrigin={{\r\n                                                vertical: 'top',\r\n                                                horizontal: 'right'\r\n                                            }}\r\n                                        >\r\n                                            <MenuItem onClick={handleClose}>\r\n                                                <GetAppTwoToneIcon sx={{ mr: 1.75 }} /> Import Card\r\n                                            </MenuItem>\r\n                                            <MenuItem onClick={handleClose}>\r\n                                                <FileCopyTwoToneIcon sx={{ mr: 1.75 }} /> Copy Data\r\n                                            </MenuItem>\r\n                                            <MenuItem onClick={handleClose}>\r\n                                                <PictureAsPdfTwoToneIcon sx={{ mr: 1.75 }} /> Export\r\n                                            </MenuItem>\r\n                                            <MenuItem onClick={handleClose}>\r\n                                                <ArchiveTwoToneIcon sx={{ mr: 1.75 }} /> Archive File\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Grid container alignItems=\"center\">\r\n                                    <Grid item>\r\n                                        <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\r\n                                            $500.00\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Avatar\r\n                                            sx={{\r\n                                                cursor: 'pointer',\r\n                                                ...theme.typography.smallAvatar,\r\n                                                backgroundColor: theme.palette.secondary[200],\r\n                                                color: theme.palette.secondary.dark\r\n                                            }}\r\n                                        >\r\n                                            <ArrowUpwardIcon fontSize=\"inherit\" sx={{ transform: 'rotate3d(1, 1, 1, 45deg)' }} />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item sx={{ mb: 1.25 }}>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 500,\r\n                                        color: theme.palette.secondary[200]\r\n                                    }}\r\n                                >\r\n                                    Total Earning\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEarningCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default EarningCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme, styled } from '@mui/material/styles';\r\nimport { Avatar, Box, Button, Grid, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonTotalOrderCard from 'ui-component/cards/Skeleton/EarningCard';\r\n\r\nimport ChartDataMonth from './chart-data/total-order-month-line-chart';\r\nimport ChartDataYear from './chart-data/total-order-year-line-chart';\r\n\r\n// assets\r\nimport LocalMallOutlinedIcon from '@mui/icons-material/LocalMallOutlined';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: '#fff',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&>div': {\r\n        position: 'relative',\r\n        zIndex: 5\r\n    },\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: theme.palette.primary[800],\r\n        borderRadius: '50%',\r\n        zIndex: 1,\r\n        top: -85,\r\n        right: -95,\r\n        [theme.breakpoints.down('sm')]: {\r\n            top: -105,\r\n            right: -140\r\n        }\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        width: 210,\r\n        height: 210,\r\n        background: theme.palette.primary[800],\r\n        borderRadius: '50%',\r\n        top: -125,\r\n        right: -15,\r\n        opacity: 0.5,\r\n        [theme.breakpoints.down('sm')]: {\r\n            top: -155,\r\n            right: -70\r\n        }\r\n    }\r\n}));\r\n\r\n// ==============================|| DASHBOARD - TOTAL ORDER LINE CHART CARD ||============================== //\r\n\r\nconst TotalOrderLineChartCard = ({ isLoading }) => {\r\n    const theme = useTheme();\r\n\r\n    const [timeValue, setTimeValue] = useState(false);\r\n    const handleChangeTime = (event, newValue) => {\r\n        setTimeValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonTotalOrderCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <Grid item>\r\n                                <Grid container justifyContent=\"space-between\">\r\n                                    <Grid item>\r\n                                        <Avatar\r\n                                            variant=\"rounded\"\r\n                                            sx={{\r\n                                                ...theme.typography.commonAvatar,\r\n                                                ...theme.typography.largeAvatar,\r\n                                                backgroundColor: theme.palette.primary[800],\r\n                                                color: '#fff',\r\n                                                mt: 1\r\n                                            }}\r\n                                        >\r\n                                            <LocalMallOutlinedIcon fontSize=\"inherit\" />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            disableElevation\r\n                                            variant={timeValue ? 'contained' : 'text'}\r\n                                            size=\"small\"\r\n                                            sx={{ color: 'inherit' }}\r\n                                            onClick={(e) => handleChangeTime(e, true)}\r\n                                        >\r\n                                            Month\r\n                                        </Button>\r\n                                        <Button\r\n                                            disableElevation\r\n                                            variant={!timeValue ? 'contained' : 'text'}\r\n                                            size=\"small\"\r\n                                            sx={{ color: 'inherit' }}\r\n                                            onClick={(e) => handleChangeTime(e, false)}\r\n                                        >\r\n                                            Year\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item sx={{ mb: 0.75 }}>\r\n                                <Grid container alignItems=\"center\">\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\">\r\n                                            <Grid item>\r\n                                                {timeValue ? (\r\n                                                    <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\r\n                                                        $108\r\n                                                    </Typography>\r\n                                                ) : (\r\n                                                    <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\r\n                                                        $961\r\n                                                    </Typography>\r\n                                                )}\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Avatar\r\n                                                    sx={{\r\n                                                        ...theme.typography.smallAvatar,\r\n                                                        cursor: 'pointer',\r\n                                                        backgroundColor: theme.palette.primary[200],\r\n                                                        color: theme.palette.primary.dark\r\n                                                    }}\r\n                                                >\r\n                                                    <ArrowDownwardIcon fontSize=\"inherit\" sx={{ transform: 'rotate3d(1, 1, 1, 45deg)' }} />\r\n                                                </Avatar>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography\r\n                                                    sx={{\r\n                                                        fontSize: '1rem',\r\n                                                        fontWeight: 500,\r\n                                                        color: theme.palette.primary[200]\r\n                                                    }}\r\n                                                >\r\n                                                    Total Order\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        {timeValue ? <Chart {...ChartDataMonth} /> : <Chart {...ChartDataYear} />}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nTotalOrderLineChartCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalOrderLineChartCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport TotalIncomeCard from 'ui-component/cards/Skeleton/TotalIncomeCard';\r\n\r\n// assets\r\nimport TableChartOutlinedIcon from '@mui/icons-material/TableChartOutlined';\r\n\r\n// styles\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.primary.light,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(210.04deg, ${theme.palette.primary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\r\n        borderRadius: '50%',\r\n        top: -30,\r\n        right: -180\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(140.9deg, ${theme.palette.primary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\r\n        borderRadius: '50%',\r\n        top: -160,\r\n        right: -130\r\n    }\r\n}));\r\n\r\n// ==============================|| DASHBOARD - TOTAL INCOME DARK CARD ||============================== //\r\n\r\nconst TotalIncomeDarkCard = ({ isLoading }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <TotalIncomeCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false}>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List sx={{ py: 0 }}>\r\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar\r\n                                        variant=\"rounded\"\r\n                                        sx={{\r\n                                            ...theme.typography.commonAvatar,\r\n                                            ...theme.typography.largeAvatar,\r\n                                            backgroundColor: theme.palette.primary[800],\r\n                                            color: '#fff'\r\n                                        }}\r\n                                    >\r\n                                        <TableChartOutlinedIcon fontSize=\"inherit\" />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        py: 0,\r\n                                        mt: 0.45,\r\n                                        mb: 0.45\r\n                                    }}\r\n                                    primary={\r\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\r\n                                            $203k\r\n                                        </Typography>\r\n                                    }\r\n                                    secondary={\r\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\r\n                                            Total Income\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nTotalIncomeDarkCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalIncomeDarkCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme, styled } from '@mui/material/styles';\r\nimport { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport TotalIncomeCard from 'ui-component/cards/Skeleton/TotalIncomeCard';\r\n\r\n// assets\r\nimport StorefrontTwoToneIcon from '@mui/icons-material/StorefrontTwoTone';\r\n\r\n// styles\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(210.04deg, ${theme.palette.warning.dark} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\r\n        borderRadius: '50%',\r\n        top: -30,\r\n        right: -180\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(140.9deg, ${theme.palette.warning.dark} -14.02%, rgba(144, 202, 249, 0) 70.50%)`,\r\n        borderRadius: '50%',\r\n        top: -160,\r\n        right: -130\r\n    }\r\n}));\r\n\r\n// ==============================|| DASHBOARD - TOTAL INCOME LIGHT CARD ||============================== //\r\n\r\nconst TotalIncomeLightCard = ({ isLoading }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <TotalIncomeCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false}>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List sx={{ py: 0 }}>\r\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar\r\n                                        variant=\"rounded\"\r\n                                        sx={{\r\n                                            ...theme.typography.commonAvatar,\r\n                                            ...theme.typography.largeAvatar,\r\n                                            backgroundColor: theme.palette.warning.light,\r\n                                            color: theme.palette.warning.dark\r\n                                        }}\r\n                                    >\r\n                                        <StorefrontTwoToneIcon fontSize=\"inherit\" />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        py: 0,\r\n                                        mt: 0.45,\r\n                                        mb: 0.45\r\n                                    }}\r\n                                    primary={<Typography variant=\"h4\">$203k</Typography>}\r\n                                    secondary={\r\n                                        <Typography\r\n                                            variant=\"subtitle2\"\r\n                                            sx={{\r\n                                                color: theme.palette.grey[500],\r\n                                                mt: 0.5\r\n                                            }}\r\n                                        >\r\n                                            Total Income\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nTotalIncomeLightCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalIncomeLightCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Box, Grid, Typography, Container, Hidden } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { red } from '@mui/material/colors';\r\n\r\n// third-party\r\nimport ApexCharts from 'apexcharts';\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport PhraseCard from './../../utilities/PhraseCard';\r\nimport readExcelFile from './../../utilities/ExcelReader';\r\n\r\n// chart data\r\nimport chartData from './chart-data/total-growth-bar-chart';\r\nimport { height } from '@mui/system';\r\n\r\nconst status = [\r\n    {\r\n        value: 'today',\r\n        label: 'Today'\r\n    },\r\n    {\r\n        value: 'month',\r\n        label: 'This Month'\r\n    },\r\n    {\r\n        value: 'year',\r\n        label: 'This Year'\r\n    }\r\n];\r\n\r\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst TotalGrowthBarChart = ({ isLoading }) => {\r\n    const theme = useTheme();\r\n\r\n    let randNum = Math.round(Math.random() * 999);\r\n    let phrase = readExcelFile(randNum, randNum + 1)[0];\r\n\r\n    return (\r\n        <>\r\n            <MainCard>\r\n                <Box sx={{ minHeight: '600px' }}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12} mt={3}>\r\n                            <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h2\" color=\"secondary\">\r\n                                        Learning phrases\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h4\" textAlign={'center'}>\r\n                                        Learning is something we do almost every day\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} mt={2}>\r\n                            <Grid container spacing={2} justifyContent=\"space-evenly\">\r\n                                {/* <Grid item xs={6}>\r\n                                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n                                        <Grid item sx={{ display: { sm: 'block', xs: 'none' } }}>\r\n                                            <Typography variant=\"h2\">What is a collocation?</Typography>\r\n                                        </Grid>\r\n                                        <Grid item mt={2} sx={{ display: { sm: 'block', xs: 'none' } }}>\r\n                                            <Typography variant=\"body1\" align=\"justify\" paragraph={true}>\r\n                                                A collocation is two or more words that often go together. These combinations just sound\r\n                                                \"right\" to native English speakers, who use them all the time. On the other hand, other\r\n                                                combinations may be unnatural and just sound \"wrong\".\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\" align=\"justify\" paragraph={true}>\r\n                                                According to McCarthy (1990:12), ‘the relationship of collocation is fundamental in the\r\n                                                study of vocabulary; it is a marriage contract between words, and some words are more firmly\r\n                                                married to each other than others’.\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid> */}\r\n                                <Grid item>\r\n                                    <Grid container sx={{ width: '250px' }} direction={'column'} alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <PhraseCard\r\n                                                phrase={phrase['English phrase ']}\r\n                                                example={phrase.Example}\r\n                                                translation={phrase['Russian translation']}\r\n                                                meaning={phrase['Meaning of the phrase ']}\r\n                                                currentNum={randNum}\r\n                                            ></PhraseCard>\r\n                                        </Grid>\r\n                                        <Grid item mt={4}>\r\n                                            <Link to={'/training'} state={{ slideMode: true }} style={{ textDecoration: 'none' }}>\r\n                                                <Button variant=\"outlined\" size=\"medium\" color=\"secondary\">\r\n                                                    Let’s get started\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nTotalGrowthBarChart.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalGrowthBarChart;\r\n","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid } from '@mui/material';\r\n\r\n// project imports\r\nimport EarningCard from './EarningCard';\r\nimport PopularCard from './PopularCard';\r\nimport TotalOrderLineChartCard from './TotalOrderLineChartCard';\r\nimport TotalIncomeDarkCard from './TotalIncomeDarkCard';\r\nimport TotalIncomeLightCard from './TotalIncomeLightCard';\r\nimport TotalGrowthBarChart from './TotalGrowthBarChart';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// ==============================|| DEFAULT DASHBOARD ||============================== //\r\n\r\nconst Dashboard = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <TotalGrowthBarChart isLoading={isLoading} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import ReactCardFlip from 'react-card-flip';\r\nimport { useState, useEffect } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Card, CardActions, CardContent, IconButton, Button, MenuItem, TextField, Typography, Container } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { red } from '@mui/material/colors';\r\n\r\nconst cardStyle = {\r\n    minWidth: 250,\r\n    minHeight: 350,\r\n    boxShadow: 3\r\n};\r\n\r\nconst bull = (\r\n    <Box component=\"span\" sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}>\r\n        •\r\n    </Box>\r\n);\r\n\r\nconst PhraseCard = (props) => {\r\n    const [isFlipped, flip] = useState(false);\r\n    const [isFavourite, makeCardFavourite] = useState(props.isFavourite);\r\n\r\n    let invertFavStat = (currentNum) => {\r\n        if (isFavourite == 'disable') {\r\n            makeCardFavourite('error');\r\n            addFavToStorage(currentNum);\r\n        } else {\r\n            makeCardFavourite('disable');\r\n            deleteFavToStorage(currentNum);\r\n            console.log('del', currentNum);\r\n        }\r\n    };\r\n\r\n    let addFavToStorage = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let favStorage = appProp.favStorage;\r\n\r\n        console.log('isFav');\r\n        if (appProp.favStorage.indexOf(num) == -1) {\r\n            favStorage.push(num);\r\n            appProp.favStorage = favStorage;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    let deleteFavToStorage = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let favStorage = appProp.favStorage;\r\n\r\n        if (appProp.favStorage.indexOf(num) != -1) {\r\n            favStorage.splice(appProp.favStorage.indexOf(num), 1);\r\n            appProp.favStorage = favStorage;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    let setCardChecked = (num) => {\r\n        let appProp = JSON.parse(localStorage.getItem('appProp'));\r\n        let checkedList = appProp.checkedList;\r\n        console.log('checkList', checkedList);\r\n        if (!checkedList) {\r\n            checkedList = [];\r\n        }\r\n        console.log('checkListAfter', checkedList);\r\n        console.log('cardChecked', num);\r\n\r\n        if (checkedList.indexOf(num) == -1) {\r\n            checkedList.push(num);\r\n            appProp.checkedList = checkedList;\r\n            localStorage.setItem('appProp', JSON.stringify(appProp));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ReactCardFlip isFlipped={isFlipped} flipDirection={props.flipDirection ? props.flipDirection : 'horizontal'}>\r\n                <Card sx={cardStyle}>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Box margin=\"10px\">\r\n                                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                                    #{props.currentNum}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <IconButton\r\n                                margin=\"10px\"\r\n                                size=\"small\"\r\n                                aria-label=\"add to favorites\"\r\n                                onClick={() => invertFavStat(props.currentNum)}\r\n                            >\r\n                                <FavoriteIcon color={isFavourite} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <CardContent\r\n                        onClick={() => {\r\n                            flip(true);\r\n                            setCardChecked(props.currentNum);\r\n                        }}\r\n                        sx={{ height: '300px' }}\r\n                    >\r\n                        <Typography variant=\"h3\" component=\"div\" textAlign=\"center\" sx={{ mt: 3 }}>\r\n                            {props.phrase}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ mb: 3, mt: 3 }} textAlign=\"center\">\r\n                            {props.example}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Card sx={cardStyle}>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <IconButton\r\n                                margin=\"10px\"\r\n                                size=\"small\"\r\n                                aria-label=\"add to favorites\"\r\n                                onClick={() => invertFavStat(props.currentNum)}\r\n                            >\r\n                                <FavoriteIcon color={isFavourite} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Box margin=\"10px\">\r\n                                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                                    #{props.currentNum}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <CardContent onClick={() => flip(false)} sx={{ height: '300px' }}>\r\n                        <Typography variant=\"h3\" component=\"div\" textAlign=\"center\" sx={{ mt: 3 }}>\r\n                            {props.meaning}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ mb: 3, mt: 3 }} textAlign=\"center\">\r\n                            {props.translation}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </ReactCardFlip>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PhraseCard;\r\n"],"names":["styled","MainCard","_ref","theme","backgroundColor","palette","secondary","dark","color","overflow","position","_defineProperty","content","width","height","background","borderRadius","top","right","breakpoints","down","opacity","primary","zIndex","light","concat","warning","isLoading","useTheme","randNum","Math","round","random","phrase","readExcelFile","_jsx","_Fragment","children","Box","sx","minHeight","_jsxs","Grid","container","spacing","gridSpacing","item","xs","mt","direction","alignItems","Typography","variant","textAlign","justifyContent","PhraseCard","example","Example","translation","meaning","currentNum","Link","to","state","slideMode","style","textDecoration","Button","size","_useState","useState","_useState2","_slicedToArray","setLoading","useEffect","TotalGrowthBarChart","cardStyle","minWidth","boxShadow","props","isFlipped","flip","_useState3","isFavourite","_useState4","makeCardFavourite","invertFavStat","addFavToStorage","deleteFavToStorage","console","log","num","appProp","JSON","parse","localStorage","getItem","favStorage","indexOf","push","setItem","stringify","splice","ReactCardFlip","flipDirection","Card","margin","fontSize","gutterBottom","IconButton","onClick","FavoriteIcon","CardContent","checkedList","setCardChecked","component","mb"],"sourceRoot":""}